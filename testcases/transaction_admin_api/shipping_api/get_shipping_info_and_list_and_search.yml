
- config:
    name: 发货api组合测试：创建普通订单-上传支付凭证-审核通过-通过订单id搜索发货单-获取发货单详情页-发货单列表
    base_url: ${ENV(order_service_host)}
    variables:
        - existed_customerPhoneNumber: ${order_customerPhoneNumber_config()}
        - existed_skuNumber: ${sku_physical_number_config()}
        - existed_customerId: ${order_customerId_config()}
        - existed_placedBy: ${order_placedBy_config()}
        - existed_total_discount: null
        - existed_handledById: ${order_handledById_config()}
        - existed_transactionNumber: ${gen_random_string(20)}
        - existed_orderPlatform: ALIPAY
        - existed_actualPayment: 0.1
        - existed_afterSaleType: 'RETURN_REFUND'
        - existed_handledById: ${order_handledById_config()}
        - unexisted_shippingId: 123456
        - unexisted_orderId: 123456


- test:
    skipIf: ${is_production()}
    name: 创建普通订单(数据准备1)
    api: api/order_manage_service/create_order.yml
    variables:
        - placedMethod: BY_ADMIN
        - orderPlatform: $existed_orderPlatform
        - customer_phone_number: $existed_customerPhoneNumber
        - customer_id: $existed_customerId
        - sku_number: $existed_skuNumber
        - total_discount: $existed_total_discount
    validate:
        - eq: [status_code, 200]
        - length_equals: [content.orderId, 20]
    extract:
        - create_order_status: status_code
        - create_order_orderId: content.orderId

- test:
    skipIf: ${is_production()}
    name: 上传支付凭证（数据准备2）
    skipUnless: ${eval_equal($create_order_status, 200)}
    api: api/order_manage_service/upload_payment.yml
    variables:
        - order_id: $create_order_orderId
        - handledById: ${internal_source_user_id()}
        - transactionNumber: ${gen_random_string(20)}
        - orderPlatform: $existed_orderPlatform
        - actualPayment: $existed_actualPayment
    validate:
        - eq: [status_code, 200]
    extract:
        - upload_status_code: status_code

- test:
    skipIf: ${is_production()}
    name: 获取付款审核单ID(paymentReviewId)（数据准备3）
    skipUnless: ${eval_equal($upload_status_code, 200)}
    api: api/order_manage_service/get_payments_reviews_list.yml
    variables:
        - orderIds: $create_order_orderId
    validate:
        - eq: [status_code, 200]
    extract:
        - search_status_code: status_code
        - paymentReviewId: content.items.0.paymentReviewId

- test:
    skipIf: ${is_production()}
    skipUnless: ${eval_equal($search_status_code, 200)}
    name: 业务审核付款审核单：审核通过（数据准备4）
    api: api/order_manage_service/bm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - reviewedById: ${internal_source_user_id()}
    extract:
        - bm_review_status_code: status_code   
    validate:
        - eq: [status_code, 200]

- test:
    skipIf: ${is_production()}
    name: 财务审核付款审核单：审核通过（数据准备5）
    skipUnless: ${eval_equal($bm_review_status_code, 200)}
    api: api/order_manage_service/fm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - reviewedById: ${internal_source_user_id()}
        - receivedAt: ${get_timestamp(10)}
    validate:
        - eq: [status_code, 200]

- test:
    setup_hooks:
        - ${sleep_N_secs(3)}
    skipIf: ${is_production()}
    name: 已登录内部账号系统-通过订单ID查找发货单-订单ID存在
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/search?orderId=$create_order_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - type_match: [content.items.0.materials, list]
        - length_equals: [content.items.0, 11]
        - length_equals: [content.items.0.materials.0, 5]
        - eq: [content.items.0.order_id, $create_order_orderId]
    extract:
        - shipping_Id: content.items.0.shipping_id
        - search_shippingId_code: status_code

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-通过订单ID查找发货单-订单ID不存在
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/search?orderId=$unexisted_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - length_equals: [content.items, 0]

- test:
    skipIf: ${is_production()}
    name: 未登录内部账号系统-通过订单ID查找发货单-订单ID存在
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/search?orderId=$create_order_orderId
    validate:
        - eq: [status_code, 401]
        - eq: [content.error_code, '10020005']


- test:   
    skipIf: ${is_production()}
    name: 已登录内部账号系统-获取发货单详情-shippingId存在
    skipUnless: ${eval_equal($search_shippingId_code, 200)}
    api: api/transaction_admin_api/get_shipping_info.yml
    variables:
        - shippingId: $shipping_Id
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.materialDetail, list]
        - type_match: [content.logisticDetail, list]
        - type_match: [content.changeLogs, list]
        - length_equals: [content, 28]

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-获取发货单详情-shippingId不存在
    skipUnless: ${eval_equal($search_shippingId_code, 200)}
    api: api/transaction_admin_api/get_shipping_info.yml
    variables:
        - shippingId: $unexisted_shippingId
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, '10018001']

- test:   
    skipIf: ${is_production()}
    name: 未登录内部账号系统-获取发货单详情-shippingId存在
    skipUnless: ${eval_equal($search_shippingId_code, 200)}
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/$shipping_Id
    validate:
        - eq: [status_code, 401]
        - eq: [content.error_code, '10020005']


- test:
    skipIf: ${is_production()}
    name: 未登录内部账号系统-获取发货单列表-不带任何参数
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/list
    validate:
        - eq: [status_code, 401]
        - eq: [content.error_code, '10020005']

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-获取发货单列表-不带任何参数
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/list
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - type_match: [content.items.0.materials, list]
        - length_equals: [content.items.0, 11]
        - length_equals: [content.items.0.materials.0, 5]

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-获取发货单列表-通过订单ID查询-orderId存在
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/list?order_id=$create_order_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - type_match: [content.items.0.materials, list]
        - length_equals: [content.items.0, 11]
        - length_equals: [content.items.0.materials.0, 5]

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-获取发货单列表-通过订单ID查询-orderId不存在
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/list?order_id=$unexisted_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - length_equals: [content.items, 0]


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-获取发货单列表-通过发货单ID查询-shippingId存在
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/list?shipping_id=$shipping_Id
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - type_match: [content.items.0.materials, list]
        - length_equals: [content.items.0, 11]
        - length_equals: [content.items.0.materials.0, 5]

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-获取发货单列表-通过发货单ID查询-shippingId不存在
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/list?shipping_id=$unexisted_shippingId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - length_equals: [content.items, 0]


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-获取发货单列表-通过发货类型查询-shipping_modes存在
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/list?shipping_modes=LESSON_TICKET
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - type_match: [content.items.0.materials, list]
        - length_equals: [content.items.0, 11]
        - length_equals: [content.items.0.materials.0, 5]

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-获取发货单列表-通过发货状态查询-states存在
    base_url: ${ENV(transaction_admin_api_host)}
    request:
        method: GET
        url: /shipping/list?states=SUCCESS
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - type_match: [content.items.0.materials, list]
        - length_equals: [content.items.0, 11]
        - length_equals: [content.items.0.materials.0, 5]