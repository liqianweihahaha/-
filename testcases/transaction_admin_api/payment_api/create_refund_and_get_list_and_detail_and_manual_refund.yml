- config:
    name: 退款api测试组合：创建退款单-查询退款申请单/退款单-通过退款申请单id获取退款单-查询退款申请单/退款单详情-手动退款-检查售后状态和退款状态
    base_url: ${ENV(transaction_admin_api_host)}
    variables:
        - existed_customerPhoneNumber: ${order_customerPhoneNumber_config()}
        - existed_skuNumber: ${sku_number_config()}
        - existed_customerId: ${order_customerId_config()}
        - existed_placedBy: ${order_placedBy_config()}
        - existed_total_discount: null
        - existed_handledById: ${order_handledById_config()}
        - existed_transactionNumber: ${gen_random_string(20)}
        - existed_orderPlatform: ALIPAY
        - existed_actualPayment: 0.03
        - existed_afterSaleType: 'RETURN_REFUND'
        - existed_issued: false
        - unexsited_orderId: 123456
        - unexsited_refundId: 12345678


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-创建普通订单(数据准备1)
    base_url: ${ENV(order_service_host)}
    api: api/order_manage_service/create_order.yml
    variables:
        - placedMethod: BY_ADMIN
        - orderPlatform: $existed_orderPlatform
        - customer_phone_number: $existed_customerPhoneNumber
        - customer_id: $existed_customerId
        - sku_number: $existed_skuNumber
        - total_discount: $existed_total_discount
    validate:
        - eq: [status_code, 200]
        - length_equals: [content.orderId, 20]
    extract:
        - create_order_status: status_code
        - create_order_orderId: content.orderId

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-上传支付凭证(数据准备2)
    base_url: ${ENV(order_service_host)}
    skipUnless: ${eval_equal($create_order_status, 200)}
    api: api/order_manage_service/upload_payment.yml
    variables:
        - order_id: $create_order_orderId
        - handledById: $existed_handledById
        - transactionNumber: $existed_transactionNumber
        - orderPlatform: $existed_orderPlatform
        - actualPayment: $existed_actualPayment
    validate:
        - eq: [status_code, 200]
    extract:
        - upload_payment_status: status_code

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-业务审核付款审核单列表-获取paymentReviewId（数据准备3）
    skipUnless: ${eval_equal($upload_payment_status, 200)}
    request:
        method: GET
        url: /orders/payments/reviews/bm?orderIds=$create_order_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - paymentReviewId: content.items.0.paymentReviewId
        - search_status_code: status_code


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-业务审核通过(数据准备4)
    skipUnless: ${eval_equal($search_status_code, 200)}
    api: api/transaction_admin_api/bm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - bm_review_status_code: status_code

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-财务经理审核通过（数据准备5）
    skipUnless: ${eval_equal($bm_review_status_code, 200)}
    api: api/transaction_admin_api/fm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - receivedAt: ${get_timestamp(10)}
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - fm_review_status_code: status_code

- test:
    skipIf: ${is_production()}
    setup_hooks:
        - ${sleep_N_secs(8)}  
    name: 已登录内部账号系统-售后申请预览-获取物料发货单等信息（数据准备6）
    skipUnless: ${eval_equal($fm_review_status_code, 200)}
    request:
        method: GET
        url: /after_sales/previews/issuing?orderId=$create_order_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - issuing_status_code: status_code
        - shipmentId_1: content.items.0.shippingId
        - material_id_1: content.items.0.materialNumber
        - material_count_1: content.items.0.returnableCount
        - shipmentId_2: content.items.1.shippingId
        - material_id_2: content.items.1.materialNumber
        - material_count_2: content.items.1.returnableCount

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-创建售后单（普通订单）-所有必填参数都填写正确-提交成功(数据准备7)
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    api: api/transaction_admin_api/create_after_sale_normal.yml
    variables:
        - login_token: ${internal_source_user_login_token()}
        - actualRefundAmount: $existed_actualPayment
        - afterSaleType: $existed_afterSaleType
        - issued: true
        - orderId: $create_order_orderId
        - materialNumber_1: $material_id_1
        - returnsCount_1: $material_count_1
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: $material_id_2
        - returnsCount_2: $material_count_2
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 200]
    extract:
        - afterSale_Id: content.afterSaleId
        - create_after_sales_status: status_code

- test:
    skipIf: ${is_production()}
    name: 未登录内部账号系统-售后单-业务经理审核通过
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    request:
        method: PATCH
        url: /after_sales/$afterSale_Id/review
    json:
        remark: "业务经理审核通过"
        reviewPassed: true
    validate:
        - eq: [status_code, 403]
        - eq: [content.error_code, '10020005']


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-售后单-业务经理审核通过
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    api: api/transaction_admin_api/after_sales_review.yml
    variables:
        - afterSaleId: $afterSale_Id
        - remark: "业务经理审核通过"
        - reviewPassed: true
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-售后单-业务负责人审核通过
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    api: api/transaction_admin_api/after_sales_review.yml
    variables:
        - afterSaleId: $afterSale_Id
        - remark: "业务负责人审核通过"
        - reviewPassed: true
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]



- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-售后单-财务主管审核通过
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    api: api/transaction_admin_api/after_sales_review.yml
    variables:
        - afterSaleId: $afterSale_Id
        - remark: "财务主管审核通过"
        - reviewPassed: true
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]

- test:
    setup_hooks:
        - ${sleep_N_secs(1)}
    skipIf: ${is_production()}
    name: 已登录内部账号系统-通过id获取售后单详情-检查售后单状态为AWAITING_REFUND
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    api: api/transaction_admin_api/get_after_sales_detail.yml
    variables:
        - afterSaleId: $afterSale_Id
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - eq: [content.state, "AWAITING_REFUND"]
    extract:
        - afterSalesState: content.state

- test:
    skipIf: ${is_production()}
    name: 未登录-查询退款申请单列表
    request:
        method: GET
        url: /refund/apply/search?orderId=$create_order_orderId
    validate:
        - eq: [status_code, 403]
        - eq: [content.error_code, "10020005"]
       

- test:
    skipIf: ${is_production()}
    name: 已登录-查询退款申请单列表-通过orderid查询-orderid存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: GET
        url: /refund/apply/search?orderId=$create_order_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - type_match: [content.items.0, object]
        - length_equals: [content.items.0, 13]
    extract:
        - refundApply_Id: content.items.0.refundApplyId


- test:
    skipIf: ${is_production()}
    name: 已登录-查询退款申请单列表-通过orderid查询-orderid不存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: GET
        url: /refund/apply/search?orderId=$unexsited_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - length_equals: [content.items, 0]

- test:
    skipIf: ${is_production()}
    name: 未登录-查询退款申请单详情
    request:
        method: GET
        url: /refund/apply/$refundApply_Id  
    validate:
        - eq: [status_code, 403]
        - eq: [content.error_code, "10020005"]

- test:
    skipIf: ${is_production()}
    name: 已登录-查询退款申请单详情-refundApplyId存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: GET
        url: /refund/apply/$refundApply_Id  
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.consumer, object]
        - type_match: [content.refunds, list]
        - length_equals: [content, 8]
        - length_equals: [content.consumer, 3]
        - length_equals: [content.refunds.0, 10]

- test:
    skipIf: ${is_production()}
    name: 已登录-查询退款申请单详情-refundApplyId不存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: GET
        url: /refund/apply/123456
        headers:
            Authorization: ${internal_source_user_login_token()}  
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10021009"]

- test:
    skipIf: ${is_production()}
    name: 未登录-查询退款单列表
    request:
        method: GET
        url: /refund/search?refundApplyIds=$refundApply_Id
    validate:
        - eq: [status_code, 403]
        - eq: [content.error_code, "10020005"]


- test:
    skipIf: ${is_production()}
    name: 已登录-查询退款单列表-通过refundApplyId查询-refundApplyId存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: GET
        url: /refund/search?refundApplyIds=$refundApply_Id
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list] 
        - type_match: [content.items.0, object]
        - length_equals: [content.items.0, 18]
    extract:
        - refund_Id: content.items.0.refundId

- test:
    skipIf: ${is_production()}
    name: 未登录-查询退款单详情
    request:
        method: GET
        url: /refund/$refund_Id  
    validate:
        - eq: [status_code, 403]
        - eq: [content.error_code, "10020005"]

- test:
    skipIf: ${is_production()}
    name: 已登录-查询退款单详情-refundId存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: GET
        url: /refund/$refund_Id 
        headers:
            Authorization: ${internal_source_user_login_token()} 
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.consumer, object] 
        - type_match: [content.refundInfo, object]
        - length_equals: [content.consumer, 3]
        - length_equals: [content.refundInfo, 10]

- test:
    skipIf: ${is_production()}
    name: 已登录-查询退款单详情-refundId不存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: GET
        url: /refund/12345678
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10021010"]

- test:
    skipIf: ${is_production()}
    name: 未登录-手动退款
    request:
        method: POST
        url: /refund/manual
        json:
            refundId: $refund_Id
            refundState: COMPLETED
    validate:
        - eq: [status_code, 403]
        - eq: [content.error_code, "10020005"]

- test:
    skipIf: ${is_production()}
    name: 已登录-手动退款-refundId存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: POST
        url: /refund/manual
        headers:
            Authorization: ${internal_source_user_login_token()}
        json:
            refundId: $refund_Id
            refundState: COMPLETED
    validate:
        - eq: [status_code, 200]
    extract:
        - refund_status: status_code

- test:
    skipIf: ${is_production()}
    name: 已登录-手动退款-refundId不存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: POST
        url: /refund/manual
        headers:
            Authorization: ${internal_source_user_login_token()}
        json:
            refundId: $unexsited_refundId
            refundState: COMPLETED
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10022020"]

- test:
    skipIf: ${is_production()}
    name: 查询售后单详情-售后状态是否为COMPLETED
    skipUnless: ${eval_equal($refund_status, 200)}
    request:
        method: GET
        url: /after_sales/$afterSale_Id/details
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [content.state, "COMPLETED"]

- test:
    skipIf: ${is_production()}
    name: 查询退款单详情-退款单状态是否为COMPLETED
    skipUnless: ${eval_equal($refund_status, 200)}
    request:
        method: GET
        url: /refund/search?refundApplyIds=$refundApply_Id
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [content.items.0.refundState, "COMPLETED"]