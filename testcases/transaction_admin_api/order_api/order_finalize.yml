- config:
    name: 测试组合：创建全款订单-创建售后单(退货退款)-调整订单完结状态
    base_url: ${ENV(transaction_admin_api_host)}
    variables:
        - existed_customerPhoneNumber: ${order_customerPhoneNumber_config()}
        - existed_skuNumber: ${sku_number_config()}
        - existed_customerId: ${order_customerId_config()}
        - existed_placedBy: ${order_placedBy_config()}
        - existed_total_discount: null
        - existed_handledById: ${order_handledById_config()}
        - existed_transactionNumber: ${gen_random_string(20)}
        - existed_orderPlatform: TMALL
        - existed_actualPayment: 0.03
        - existed_applyExchangeAmount: 0
        - exsited_final: 1
        - existed_afterSaleType: 'RETURN_REFUND'
        - existed_issued: true
        - unexisted_orderId: 123456


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-创建普通订单(数据准备1)
    base_url: ${ENV(order_service_host)}
    api: api/order_manage_service/create_order.yml
    variables:
        - placedMethod: BY_ADMIN
        - orderPlatform: $existed_orderPlatform
        - customer_phone_number: $existed_customerPhoneNumber
        - customer_id: $existed_customerId
        - sku_number: $existed_skuNumber
        - total_discount: $existed_total_discount
    validate:
        - eq: [status_code, 200]
        - length_equals: [content.orderId, 20]
    extract:
        - create_order_status: status_code
        - create_order_orderId: content.orderId



- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-上传支付凭证(数据准备2)
    base_url: ${ENV(order_service_host)}
    skipUnless: ${eval_equal($create_order_status, 200)}
    api: api/order_manage_service/upload_payment.yml
    variables:
        - order_id: $create_order_orderId
        - handledById: $existed_handledById
        - transactionNumber: $existed_transactionNumber
        - orderPlatform: $existed_orderPlatform
        - actualPayment: $existed_actualPayment
    validate:
        - eq: [status_code, 200]
    extract:
        - upload_payment_status: status_code

- test:
    skipIf: ${is_production()}
    setup_hooks:
        - ${sleep_N_secs(3)}
    name: 已登录内部账号系统-业务审核付款审核单列表-获取paymentReviewId（数据准备3）
    skipUnless: ${eval_equal($upload_payment_status, 200)}
    request:
        method: GET
        url: /orders/payments/reviews/bm?orderIds=$create_order_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - paymentReviewId: content.items.0.paymentReviewId
        - search_status_code: status_code


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-业务审核通过(数据准备4)
    skipUnless: ${eval_equal($search_status_code, 200)}
    api: api/transaction_admin_api/bm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - bm_review_status_code: status_code

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-财务经理审核通过（数据准备5）
    skipUnless: ${eval_equal($bm_review_status_code, 200)}
    api: api/transaction_admin_api/fm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - receivedAt: ${get_timestamp(10)}
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - fm_review_status_code: status_code

- test:
    skipIf: ${is_production()}
    setup_hooks:
        - ${sleep_N_secs(8)}  
    name: 已登录内部账号系统-售后申请预览-获取物料发货单等信息（数据准备6）
    skipUnless: ${eval_equal($fm_review_status_code, 200)}
    request:
        method: GET
        url: /after_sales/previews/issuing?orderId=$create_order_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - issuing_status_code: status_code
        - shipmentId_1: content.items.0.shippingId
        - material_id_1: content.items.0.materialNumber
        - material_count_1: content.items.0.returnableCount
        - shipmentId_2: content.items.1.shippingId
        - material_id_2: content.items.1.materialNumber
        - material_count_2: content.items.1.returnableCount


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-调整订单完结状态-订单id不存在-调整失败
    request:
        method: PATCH
        url: /orders/$unexisted_orderId/finalize
        headers:
            Authorization: ${internal_source_user_login_token()}
        json:
            final: 1
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, '10017006']


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-调整订单完结状态-订单状态已完成&不存在售后单-调整失败
    request:
        method: PATCH
        url: /orders/$create_order_orderId/finalize
        headers:
            Authorization: ${internal_source_user_login_token()}
        json:
            final: 1
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, '10017051']


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-创建售后单（普通订单）-所有必填参数都填写正确-提交成功(数据准备7)
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    api: api/transaction_admin_api/create_after_sales_normal.yml
    variables:
        - login_token: ${internal_source_user_login_token()}
        - actualRefundAmount: $existed_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: $existed_issued
        - orderId: $create_order_orderId
        - materialNumber_1: $material_id_1
        - returnsCount_1: $material_count_1
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: $material_id_2
        - returnsCount_2: $material_count_2
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 200]
    extract:
        - afterSale_Id: content.afterSaleId
        - create_after_sales_status: status_code

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-售后单-业务经理审核通过
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    api: api/transaction_admin_api/after_sales_review.yml
    variables:
        - afterSaleState: AWAITING_BM_REVIEW
        - afterSaleId: $afterSale_Id
        - remark: "业务经理审核通过"
        - reviewPassed: true
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-售后单-业务负责人审核通过
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    api: api/transaction_admin_api/after_sales_review.yml
    variables:
        - afterSaleState: AWAITING_BD_REVIEW
        - afterSaleId: $afterSale_Id
        - remark: "业务负责人审核通过"
        - reviewPassed: true
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]



- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-售后单-会计审核通过
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    api: api/transaction_admin_api/after_sales_review.yml
    variables:
        - afterSaleState: AWAITING_ACCOUNTANT_REVIEW
        - afterSaleId: $afterSale_Id
        - remark: "会计审核通过"
        - reviewPassed: true
        - login_token: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]


- test:
    skipIf: ${is_production()}
    setup_hooks:
        - ${sleep_N_secs(3)}
    name: 已登录-查询退款单列表-通过orderId查询-orderId存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: GET
        url: /refund/search?orderId=$create_order_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - refund_Id: content.items.0.refundId

- test:
    skipIf: ${is_production()}
    name: 已登录-手动退款-refundId存在
    skipUnless: ${eval_equal($afterSalesState, 'AWAITING_REFUND')}
    request:
        method: POST
        url: /refund/manual
        headers:
            Authorization: ${internal_source_user_login_token()}
        json:
            refundId: $refund_Id
            refundState: COMPLETED
    validate:
        - eq: [status_code, 200]
    extract:
        - refund_status: status_code

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-查看订单详情页-系统是否自动完结订单-final状态是1
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    request:
        method: GET
        url: /orders/$create_order_orderId/details
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - eq: [content.final, 1]


- test:
    skipIf: ${is_production()}
    name: 未登录内部账号系统-调整订单完结状态
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    request:
        method: PATCH
        url: /orders/$create_order_orderId/finalize
        json:
            final: 1
    validate:
        - eq: [status_code, 401]
        - eq: [content.error_code, '10020005']



- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-调整订单完结状态-订单状态已完成&存在售后单-调整成功
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    request:
        method: PATCH
        url: /orders/$create_order_orderId/finalize
        headers:
            Authorization: ${internal_source_user_login_token()}
        json:
            final: 0
    validate:
        - eq: [status_code, 200]


- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-调整完成-查看订单详情页-final状态是0
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    request:
        method: GET
        url: /orders/$create_order_orderId/details
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - eq: [content.final, 0]

- test:
    skipIf: ${is_production()}
    name: 已登录内部账号系统-查看订单轨迹-订单调整完结状态的轨迹已生成
    skipUnless: ${eval_equal($create_after_sales_status, 200)}
    request:
        method: GET
        url: /orders/logs?orderId=$create_order_orderId&orderLogSorts=ID_DESC
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
        - contains: [content.items.0.remark, '订单被标记为售后未完结, 订单可以继续退券退款或者换货']