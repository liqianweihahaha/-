- config:
    name: 测试组合：创建订金订单-创建售后单（仅退款）-业务经理审核通过-业务负责人审核通过-会计审核通过-人工退款-检查售后单状态是否为已完成
    base_url: ${get_order_service_host()}
    variables:
        - existed_customerPhoneNumber: ${order_customerPhoneNumber_config()}
        - existed_skuNumber: ${sku_number_deposit()}
        - existed_customerId: ${order_customerId_config()}
        - existed_placedById: ${order_handledById_config()}
        - existed_deposit: 0.01
        - existed_applyExchangeAmount: 0
        - exsited_final: 1 
        - existed_handledById: ${order_handledById_config()}
        - existed_handledByName: ${order_handledByName_config()}
        - existed_transactionNumber: ${gen_random_string(20)}
        - existed_orderPlatform: TMALL
        - existed_afterSaleType: 'REFUND'
        - existed_handledById: ${order_handledById_config()}
        - existed_issued: false
        - unexisted_actualPayment: 100
        - unexisted_orderId: 123456
        - unexisted_afterSaleType: "aaaaa"
        - unexisted_ownerId: ""
        - unexisted_skuNumber: "1111111111111"

- test:
    skipIf: ${is_production()}
    name: 创建订金订单(数据准备1)
    api: api/order_manage_service/create_order_deposit.yml
    variables:
        - placedMethod: BY_ADMIN
        - orderPlatform: $existed_orderPlatform
        - placedById: $existed_placedById
        - customerId: $existed_customerId
        - skuNumber: $existed_skuNumber
        - deposit: $existed_deposit
    validate:
        - eq: [status_code, 200]
        - length_equals: [content.orderId, 20]
    extract:
        - create_order_status: status_code
        - create_order_orderId: content.orderId

- test:
    skipIf: ${is_production()}
    name: 上传支付凭证(数据准备2)
    skipUnless: ${eval_equal($create_order_status, 200)}
    api: api/order_manage_service/upload_payment.yml
    variables:
        - order_id: $create_order_orderId
        - handledById: $existed_handledById
        - transactionNumber: $existed_transactionNumber
        - orderPlatform: $existed_orderPlatform
        - actualPayment: $existed_deposit
    validate:
        - eq: [status_code, 200]
    extract:
        - upload_payment_status: status_code

- test:
    skipIf: ${is_production()}
    name: 付款业务审核列表-订单id查询-获取paymentReviewId(数据准备3)
    skipUnless: ${eval_equal($create_order_status, 200)}
    api: api/order_manage_service/get_payments_reviews_list.yml
    variables:
        - orderIds: $create_order_orderId
    validate:
        - eq: [status_code, 200]
    extract:
        - search_status_code: status_code
        - paymentReviewId: content.items.0.paymentReviewId

- test:
    skipIf: ${is_production()}
    name: 业务经理审核通过(数据准备4)
    skipUnless: ${eval_equal($search_status_code, 200)}
    api: api/order_manage_service/bm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - reviewedById: $existed_handledById
    validate:
        - eq: [status_code, 200]
    extract:
        - bm_review_status_code: status_code

- test:
    skipIf: ${is_production()}
    name: 财务经理审核通过（数据准备5）
    skipUnless: ${eval_equal($bm_review_status_code, 200)}
    api: api/order_manage_service/fm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - reviewedById: $existed_handledById
        - receivedAt: ${get_timestamp(10)}
    validate:
        - eq: [status_code, 200]
    extract:
        - fm_review_status_code: status_code


- test:
    setup_hooks:
        - ${sleep_N_secs(5)}
    skipIf: ${is_production()}
    name: 能否申请售后-订单存在/已完成/没有有未完成的售后单/剩余可退金额大于0
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    request:
        method: GET
        url: /after_sales/issuable?orderId=$create_order_orderId
    validate:
        - eq: [status_code, 200]
        - eq: [content.issuable, true]

- test:
    skipIf: ${is_production()}
    name: 能否申请售后-订单为空或不存在
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    request:
        method: GET
        url: /after_sales/issuable?orderId=$unexisted_orderId
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017006"]

- test:
    skipIf: ${is_production()}
    name: 获得可退金额-订单存在，符合申请售后的条件
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    request:
        method: GET
        url: /after_sales/amount/refundable?orderId=$create_order_orderId
    validate:
        - eq: [status_code, 200]
        - greater_than: [content.refundableAmount, 0]

- test:
    skipIf: ${is_production()}
    name: 获得可退金额-订单为空或不存在
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    request:
        method: GET
        url: /after_sales/amount/refundable?orderId=$unexisted_orderId
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017006"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（订金订单）-申请售后金额>可退金额-保存失败
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    api: api/order_manage_service/create_after_sales_deposit.yml
    variables:
        - actualRefundAmount: $unexisted_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - returnsCount: 1
        - skuNumber: $existed_skuNumber
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017028"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（订金订单）-订单ID不存在-保存失败
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    api: api/order_manage_service/create_after_sales_deposit.yml
    variables:
        - actualRefundAmount: $existed_deposit
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: false
        - orderId: $unexisted_orderId
        - ownerId: $existed_handledById
        - returnsCount: 1
        - skuNumber: $existed_skuNumber
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017006"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（订金订单）-售后类型不存在-保存失败
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    api: api/order_manage_service/create_after_sales_deposit.yml
    variables:
        - actualRefundAmount: $existed_deposit
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $unexisted_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - returnsCount: 1
        - skuNumber: $existed_skuNumber
    validate:
        - eq: [status_code, 400]
        - eq: [content.error_code, "Message-Unreadable@Common"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（订金订单）-ownerId为空-保存失败
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    api: api/order_manage_service/create_after_sales_deposit.yml
    variables:
        - actualRefundAmount: $existed_deposit
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $unexisted_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $unexisted_ownerId
        - returnsCount: 1
        - skuNumber: $existed_skuNumber
    validate:
        - eq: [status_code, 400]


- test:
    skipIf: ${is_production()}
    name: 创建售后单（订金订单）-skuNumber不存在-保存失败
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    api: api/order_manage_service/create_after_sales_deposit.yml
    variables:
        - actualRefundAmount: $existed_deposit
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - returnsCount: 1
        - skuNumber: $unexisted_skuNumber
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017002"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（订金订单）-所有必填参数都填写正确-提交成功
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    api: api/order_manage_service/create_after_sales_deposit.yml
    variables:
        - actualRefundAmount: $existed_deposit
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: true
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - returnsCount: 1
        - skuNumber: $existed_skuNumber
    validate:
        - eq: [status_code, 200]
    extract:
        - afterSaleId: content.afterSaleId
        - afterSale_status: status_code

- test:
    skipIf: ${is_production()}
    name: 查看售后单详情-检查售后状态
    api: api/order_manage_service/get_after_sales_detail.yml
    variables:
        - afterSaleId: $afterSaleId
    validate:
        - eq: [status_code, 200]
        - eq: [content.state, "AWAITING_BM_REVIEW"]


- test:
    skipIf: ${is_production()}
    name: 售后单-业务经理审核通过
    skipUnless: ${eval_equal($afterSale_status, 200)}
    api: api/order_manage_service/after_sales_review.yml
    variables:
        - afterSaleId: $afterSaleId
        - remark: "业务经理审核通过"
        - reviewPassed: true
        - reviewedBy: $existed_handledByName
        - reviewedById: $existed_handledById
    validate:
        - eq: [status_code, 200]


- test:
    setup_hooks:
        - ${sleep_N_secs(1)}
    skipIf: ${is_production()}
    name: 售后单-业务负责人审核通过
    skipUnless: ${eval_equal($afterSale_status, 200)}
    api: api/order_manage_service/after_sales_review.yml
    variables:
        - afterSaleId: $afterSaleId
        - remark: "业务负责人审核通过"
        - reviewPassed: true
        - reviewedBy: $existed_handledByName
        - reviewedById: $existed_handledById
    validate:
        - eq: [status_code, 200]


- test:
    setup_hooks:
        - ${sleep_N_secs(2)}
    skipIf: ${is_production()}
    name: 售后单-会计审核通过
    skipUnless: ${eval_equal($afterSale_status, 200)}
    api: api/order_manage_service/after_sales_review.yml
    variables:
        - afterSaleId: $afterSaleId
        - remark: "会计审核通过"
        - reviewPassed: true
        - reviewedBy: $existed_handledByName
        - reviewedById: $existed_handledById
    validate:
        - eq: [status_code, 200]


- test:
    skipIf: ${is_production()}
    name: 获取售后详情页-检查售后单的状态是否为待退款(20000)
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales/$afterSaleId
    validate:
        - eq: [status_code, 200]
        - eq: [content.state, "AWAITING_REFUND"]


- test:
    skipIf: ${is_production()}
    name: 查询退款单列表-通过orderid查询-orderid存在-获取退款单id
    base_url: ${get_payment_service_host()}
    request:
        method: GET
        url: /refund/search?orderId=$create_order_orderId
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list] 
        - type_match: [content.items.0, object]
        - length_equals: [content.items.0, 20]
    extract:
        - refund_Id: content.items.0.refundId

- test:
    skipIf: ${is_production()}
    name: 手动退款-refundId存在
    base_url: ${get_payment_service_host()}
    request:
        method: POST
        url: /refund/manual
        json:
            refundId: $refund_Id
            refundState: COMPLETED
            handlerId: $existed_handledById
            handler: $existed_handledByName
    validate:
        - eq: [status_code, 200]
    extract:
        - refund_status: status_code


- test:
    setup_hooks:
        - ${sleep_N_secs(2)}
    skipIf: ${is_production()}
    name: 获取售后详情页-检查售后单的状态是否为已完成(20000)
    request:
        method: GET
        url: /after_sales/$afterSaleId
    validate:
        - eq: [status_code, 200]
        - eq: [content.state, "COMPLETED"]