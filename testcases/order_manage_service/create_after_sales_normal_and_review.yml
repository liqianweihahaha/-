- config:
    name: 售后单业务经理审核-业务负责人审核-会计审核-财务主管审核流程
    base_url: ${ENV(order_service_host)}
    variables:
        - existed_customerPhoneNumber: ${order_customerPhoneNumber_config()}
        - existed_skuNumber: ${sku_number_config()}
        - existed_customerId: ${order_customerId_config()}
        - existed_placedBy: ${order_placedBy_config()}
        - existed_total_discount: null
        - existed_handledById: ${order_handledById_config()}
        - existed_handledByName: ${order_handledByName_config()}
        - existed_transactionNumber: ${gen_random_string(20)}
        - existed_orderPlatform: ALIPAY
        - existed_actualPayment: 0.03
        - existed_afterSaleType: 'RETURN_REFUND'

- test:
    skipIf: ${is_production()}
    name: 创建普通订单(数据准备1)
    api: api/order_manage_service/create_order.yml
    variables:
        - placedMethod: BY_ADMIN
        - orderPlatform: $existed_orderPlatform
        - customer_phone_number: $existed_customerPhoneNumber
        - customer_id: $existed_customerId
        - sku_number: $existed_skuNumber
        - total_discount: $existed_total_discount
    validate:
        - eq: [status_code, 200]
        - length_equals: [content.orderId, 20]
    extract:
        - create_order_status: status_code
        - create_order_orderId: content.orderId

- test:
    skipIf: ${is_production()}
    name: 上传支付凭证(数据准备2)
    skipUnless: ${eval_equal($create_order_status, 200)}
    api: api/order_manage_service/upload_payment.yml
    variables:
        - order_id: $create_order_orderId
        - handledById: $existed_handledById
        - transactionNumber: $existed_transactionNumber
        - orderPlatform: $existed_orderPlatform
        - actualPayment: $existed_actualPayment
    validate:
        - eq: [status_code, 200]
    extract:
        - upload_payment_status: status_code

- test:
    skipIf: ${is_production()}
    name: 付款业务审核列表-订单id查询-获取paymentReviewId(数据准备3)
    skipUnless: ${eval_equal($create_order_status, 200)}
    api: api/order_manage_service/get_payments_reviews_list.yml
    variables:
        - orderIds: $create_order_orderId
    validate:
        - eq: [status_code, 200]
    extract:
        - search_status_code: status_code
        - paymentReviewId: content.items.0.paymentReviewId

- test:
    skipIf: ${is_production()}
    name: 业务经理审核通过(数据准备4)
    skipUnless: ${eval_equal($search_status_code, 200)}
    api: api/order_manage_service/bm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - reviewedById: $existed_handledById
    validate:
        - eq: [status_code, 200]
    extract:
        - bm_review_status_code: status_code

- test:
    skipIf: ${is_production()}
    name: 财务经理审核通过（数据准备5）
    skipUnless: ${eval_equal($bm_review_status_code, 200)}
    api: api/order_manage_service/fm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - reviewedById: $existed_handledById
        - receivedAt: ${get_timestamp(10)}
    validate:
        - eq: [status_code, 200]
    extract:
        - fm_review_status_code: status_code

- test:
    skipIf: ${is_production()}
    setup_hooks:
        - ${sleep_N_secs(10)}
    name: 售后申请预览-获取物料发货单等信息（数据准备6）
    skipUnless: ${eval_equal($fm_review_status_code, 200)}
    request:
        method: GET
        url: ${ENV(transaction_admin_api_host)}/after_sales/previews/issuing?orderId=$create_order_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - shipmentId_1: content.items.0.shippingId
        - material_id_1: content.items.0.materialNumber
        - material_count_1: content.items.0.returnableCount
        - shipmentId_2: content.items.1.shippingId
        - material_id_2: content.items.1.materialNumber
        - material_count_2: content.items.1.returnableCount


- test:
    skipIf: ${is_production()}
    name: 创建售后单（普通订单）-所有必填参数都填写正确-提交成功
    skipUnless: ${eval_equal($fm_review_status_code, 200)}
    api: api/order_manage_service/create_after_sales.yml
    variables:
        - actualRefundAmount: $existed_actualPayment
        - afterSaleType: $existed_afterSaleType
        - issued: true
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - materialNumber_1: $material_id_1
        - returnsCount_1: $material_count_1
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: $material_id_2
        - returnsCount_2: $material_count_2
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 200]
    extract:
        - afterSaleId: content.afterSaleId
        - afterSale_status: status_code

- test:
    skipIf: ${is_production()}
    name: 售后单-业务经理审核通过
    skipUnless: ${eval_equal($afterSale_status, 200)}
    api: api/order_manage_service/after_sales_review.yml
    variables:
        - afterSaleId: $afterSaleId
        - remark: "业务经理审核通过"
        - reviewPassed: true
        - reviewedBy: $existed_handledByName
        - reviewedById: $existed_handledById
    validate:
        - eq: [status_code, 200]

- test:
    skipIf: ${is_production()}
    name: 获取最近的售后审核-检查业务经理审核通过后的状态是否为1002
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales/reviews/latest?afterSaleIds=$afterSaleId
    validate:
        - eq: [status_code, 200]
        - type_match: [content, list]
        - eq: [content.0.reviewState, 1002]

- test:
    setup_hooks:
        - ${sleep_N_secs(1)}
    skipIf: ${is_production()}
    name: 售后单-业务负责人审核通过
    skipUnless: ${eval_equal($afterSale_status, 200)}
    api: api/order_manage_service/after_sales_review.yml
    variables:
        - afterSaleId: $afterSaleId
        - remark: "业务负责人审核通过"
        - reviewPassed: true
        - reviewedBy: $existed_handledByName
        - reviewedById: $existed_handledById
    validate:
        - eq: [status_code, 200]

- test:
    skipIf: ${is_production()}
    name: 获取最近的售后审核-检查业务负责人审核通过后的状态是否为1102
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales/reviews/latest?afterSaleIds=$afterSaleId
    validate:
        - eq: [status_code, 200]
        - type_match: [content, list]
        - eq: [content.0.reviewState, 1102]

- test:
    setup_hooks:
        - ${sleep_N_secs(2)}
    skipIf: ${is_production()}
    name: 售后单-财务主管审核通过
    skipUnless: ${eval_equal($afterSale_status, 200)}
    api: api/order_manage_service/after_sales_review.yml
    variables:
        - afterSaleId: $afterSaleId
        - remark: "财务主管审核通过"
        - reviewPassed: true
        - reviewedBy: $existed_handledByName
        - reviewedById: $existed_handledById
    validate:
        - eq: [status_code, 200]

- test:
    setup_hooks:
        - ${sleep_N_secs(2)}
    skipIf: ${is_production()}
    name: 获取最近的售后审核-检查财务主管审核通过后的状态是否为7002
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales/reviews/latest?afterSaleIds=$afterSaleId
    validate:
        - eq: [status_code, 200]
        - type_match: [content, list]
        - eq: [content.0.reviewState, 7002]

- test:
    skipIf: ${is_production()}
    name: 获取售后详情页-检查售后单的状态是否为待退款(20000)
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales/$afterSaleId
    validate:
        - eq: [status_code, 200]
        - eq: [content.state, "20000"]