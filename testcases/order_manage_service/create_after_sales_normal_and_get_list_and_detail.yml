- config:
    name: 售后service测试组合：能否申请售后-获得可退金额-创建售后单-售后单详情状态检查-获取售后项-获取售后单列表-获取售后单详情
    base_url: ${get_order_service_host()}
    variables:
        - existed_customerPhoneNumber: ${order_customerPhoneNumber_config()}
        - existed_skuNumber: ${sku_number_config()}
        - existed_customerId: ${order_customerId_config()}
        - existed_placedBy: ${order_placedBy_config()}
        - existed_total_discount: null
        - existed_handledById: ${order_handledById_config()}
        - existed_transactionNumber: ${gen_random_string(20)}
        - existed_orderPlatform: ALIPAY
        - existed_actualPayment: 0.03
        - existed_applyExchangeAmount: 0
        - exsited_final: 1
        - existed_afterSaleType: 'RETURN_REFUND'
        - existed_issued: false
        - unexisted_actualPayment: 100
        - unexisted_orderId: 123456
        - unexisted_afterSaleType: "aaaaa"
        - unexisted_afterSaleId: 123456
        - unexisted_ownerId: ""
        - unexisted_materialNumber: "SU000000"
        - unexisted_returnsCount: 10000
        - unexisted_shippingId: "S191200000000000"
        - unexisted_skuNumber: "1111111111111"

- test:
    skipIf: ${is_production()}
    name: 创建普通订单(数据准备1)
    api: api/order_manage_service/create_order.yml
    variables:
        - placedMethod: BY_ADMIN
        - orderPlatform: $existed_orderPlatform
        - customer_phone_number: $existed_customerPhoneNumber
        - customer_id: $existed_customerId
        - sku_number: $existed_skuNumber
        - total_discount: $existed_total_discount
    validate:
        - eq: [status_code, 200]
        - length_equals: [content.orderId, 20]
    extract:
        - create_order_status: status_code
        - create_order_orderId: content.orderId

- test:
    skipIf: ${is_production()}
    name: 上传支付凭证(数据准备2)
    skipUnless: ${eval_equal($create_order_status, 200)}
    api: api/order_manage_service/upload_payment.yml
    variables:
        - order_id: $create_order_orderId
        - handledById: $existed_handledById
        - transactionNumber: $existed_transactionNumber
        - orderPlatform: $existed_orderPlatform
        - actualPayment: $existed_actualPayment
    validate:
        - eq: [status_code, 200]
    extract:
        - upload_payment_status: status_code

- test:
    skipIf: ${is_production()}
    name: 付款业务审核列表-订单id查询-获取paymentReviewId(数据准备3)
    skipUnless: ${eval_equal($create_order_status, 200)}
    api: api/order_manage_service/get_payments_reviews_list.yml
    variables:
        - orderIds: $create_order_orderId
    validate:
        - eq: [status_code, 200]
    extract:
        - search_status_code: status_code
        - paymentReviewId: content.items.0.paymentReviewId

- test:
    skipIf: ${is_production()}
    name: 业务经理审核通过(数据准备4)
    skipUnless: ${eval_equal($search_status_code, 200)}
    api: api/order_manage_service/bm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - reviewedById: $existed_handledById
    validate:
        - eq: [status_code, 200]
    extract:
        - bm_review_status_code: status_code

- test:
    skipIf: ${is_production()}
    name: 财务经理审核通过（数据准备5）
    skipUnless: ${eval_equal($bm_review_status_code, 200)}
    api: api/order_manage_service/fm_review_payment_reviews.yml
    variables:
        - orderId: $create_order_orderId
        - paymentReviewId: $paymentReviewId
        - reviewPassed: true
        - reviewedById: $existed_handledById
        - receivedAt: ${get_timestamp(10)}
    validate:
        - eq: [status_code, 200]

- test:
    skipIf: ${is_production()}
    setup_hooks:
        - ${sleep_N_secs(4)}
    name: 售后申请预览-获取物料发货单等信息（数据准备6）
    request:
        method: GET
        url: ${ENV(transaction_admin_api_host)}/after_sales/previews/issuing?orderId=$create_order_orderId
        headers:
            Authorization: ${internal_source_user_login_token()}
    validate:
        - eq: [status_code, 200]
    extract:
        - shipmentId_1: content.items.0.shippingId
        - shipmentId_2: content.items.1.shippingId

- test:
    setup_hooks:
        - ${sleep_N_secs(2)}
    skipIf: ${is_production()}
    name: 能否申请售后-订单存在/已完成/没有未完成的售后单/剩余可退金额大于0
    skipUnless: ${eval_equal($order_state, "COMPLETED")}
    request:
        method: GET
        url: /after_sales/issuable?orderId=$create_order_orderId
    validate:
        - eq: [status_code, 200]
        - eq: [content.issuable, true]

- test:
    skipIf: ${is_production()}
    name: 能否申请售后-订单为空或不存在
    request:
        method: GET
        url: /after_sales/issuable?orderId=$unexisted_orderId
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017006"]


- test:
    skipIf: ${is_production()}
    name: 获得可退金额-订单存在，符合申请售后的条件
    request:
        method: GET
        url: /after_sales/amount/refundable?orderId=$create_order_orderId
    validate:
        - eq: [status_code, 200]
        - greater_than: [content.refundableAmount, 0]

- test:
    name: 获得可退金额-订单为空或不存在
    request:
        method: GET
        url: /after_sales/amount/refundable?orderId=$unexisted_orderId
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017006"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（普通订单）-申请售后金额>可退金额-保存失败
    api: api/order_manage_service/create_after_sales.yml
    variables:
        - actualRefundAmount: $unexisted_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - materialNumber_1: ${material_number_1_config()}
        - returnsCount_1: ${material_count_1_config()}
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: ${material_number_2_config()}
        - returnsCount_2: ${material_count_2_config()}
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017067"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（普通订单）-订单ID不存在-保存失败
    api: api/order_manage_service/create_after_sales.yml
    variables:
        - actualRefundAmount: $existed_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: false
        - orderId: $unexisted_orderId
        - ownerId: $existed_handledById
        - materialNumber_1: ${material_number_1_config()}
        - returnsCount_1: ${material_count_1_config()}
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: ${material_number_2_config()}
        - returnsCount_2: ${material_count_2_config()}
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017006"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（普通订单）-售后类型不存在-保存失败
    api: api/order_manage_service/create_after_sales.yml
    variables:
        - actualRefundAmount: $existed_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $unexisted_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - materialNumber_1: ${material_number_1_config()}
        - returnsCount_1: ${material_count_1_config()}
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: ${material_number_2_config()}
        - returnsCount_2: ${material_count_2_config()}
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 400]
        - eq: [content.error_code, "Message-Unreadable@Common"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（普通订单）-ownerId为空-保存失败
    api: api/order_manage_service/create_after_sales.yml
    variables:
        - actualRefundAmount: $existed_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $unexisted_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $unexisted_ownerId
        - materialNumber_1: ${material_number_1_config()}
        - returnsCount_1: ${material_count_1_config()}
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: ${material_number_2_config()}
        - returnsCount_2: ${material_count_2_config()}
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 400]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（普通订单）-materialNumber不存在-保存失败
    api: api/order_manage_service/create_after_sales.yml
    variables:
        - actualRefundAmount: $existed_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - materialNumber_1: $unexisted_materialNumber
        - returnsCount_1: ${material_count_1_config()}
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: ${material_number_2_config()}
        - returnsCount_2: ${material_count_2_config()}
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017071"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（普通订单）-申请售后数量>可退数量-保存失败
    api: api/order_manage_service/create_after_sales.yml
    variables:
        - actualRefundAmount: $existed_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - materialNumber_1: ${material_number_1_config()}
        - returnsCount_1: $unexisted_returnsCount
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: ${material_number_2_config()}
        - returnsCount_2: ${material_count_2_config()}
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017070"]


- test:
    skipIf: ${is_production()}
    name: 创建售后单（普通订单）-shippingId不存在-保存失败
    api: api/order_manage_service/create_after_sales.yml
    variables:
        - actualRefundAmount: $existed_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - materialNumber_1: ${material_number_1_config()}
        - returnsCount_1: ${material_count_1_config()}
        - shippingId_1: $unexisted_shippingId
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: ${material_number_2_config()}
        - returnsCount_2: ${material_count_2_config()}
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017071"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（普通订单）-skuNumber不存在-保存失败
    api: api/order_manage_service/create_after_sales.yml
    variables:
        - actualRefundAmount: $existed_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: false
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - materialNumber_1: ${material_number_1_config()}
        - returnsCount_1: ${material_count_1_config()}
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $unexisted_skuNumber
        - materialNumber_2: ${material_number_2_config()}
        - returnsCount_2: ${material_count_2_config()}
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017071"]

- test:
    skipIf: ${is_production()}
    name: 创建售后单（普通订单）-所有必填参数都填写正确-提交成功
    api: api/order_manage_service/create_after_sales.yml
    variables:
        - actualRefundAmount: $existed_actualPayment
        - applyExchangeAmount: $existed_applyExchangeAmount
        - final: $exsited_final
        - afterSaleType: $existed_afterSaleType
        - issued: true
        - orderId: $create_order_orderId
        - ownerId: $existed_handledById
        - materialNumber_1: ${material_number_1_config()}
        - returnsCount_1: ${material_count_1_config()}
        - shippingId_1: $shipmentId_1
        - skuNumber_1: $existed_skuNumber
        - materialNumber_2: ${material_number_2_config()}
        - returnsCount_2: ${material_count_2_config()}
        - shippingId_2: $shipmentId_2
        - skuNumber_2: $existed_skuNumber
    validate:
        - eq: [status_code, 200]
    extract:
        - afterSaleId: content.afterSaleId
        - afterSale_status: status_code

- test:
    skipIf: ${is_production()}
    name: 通过id获取售后单-检查售后状态-afterSaleId存在
    skipUnless: ${eval_equal($afterSale_status, 200)}
    api: api/order_manage_service/get_after_sales_detail.yml
    variables:
        - afterSaleId: $afterSaleId
    validate:
        - eq: [status_code, 200]
        - eq: [content.state, "AWAITING_BM_REVIEW"]

- test:
    skipIf: ${is_production()}
    name: 通过id获取售后单-afterSaleId不存在
    skipUnless: ${eval_equal($afterSale_status, 200)}
    api: api/order_manage_service/get_after_sales_detail.yml
    variables:
        - afterSaleId: $unexisted_afterSaleId
    validate:
        - eq: [status_code, 200]


- test:
    skipIf: ${is_production()}
    name: 订单能否申请售后-有未完成的售后单
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales/issuable?orderId=$create_order_orderId
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10017064"]

- test:
    skipIf: ${is_production()}
    name: 获取售后单列表-不带任何条件
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]

- test:
    skipIf: ${is_production()}
    name: 获取售后单列表-售后ID查询-存在
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales?afterSaleIds=$afterSaleId
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - eq: [content.items.0.afterSaleId, $afterSaleId]
        - length_equals: [content.items, 1]


- test:
    skipIf: ${is_production()}
    name: 获取售后单列表-订单ID查询-存在
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales?orderIds=$create_order_orderId
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - type_match: [content.items, list]
        - eq: [content.items.0.orderId, $create_order_orderId]
        - length_equals: [content.items, 1]


- test:
    skipIf: ${is_production()}
    name: 获取售后项-afterSaleId存在
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales/$afterSaleId/items
    validate:
        - eq: [status_code, 200]
        - type_match: [content, list]
        - length_equals: [content.0, 13]

- test:
    skipIf: ${is_production()}
    name: 获取售后项-afterSaleId不存在
    request:
        method: GET
        url: /after_sales/$unexisted_afterSaleId/items
    validate:
        - eq: [status_code, 200]
        - type_match: [content, list]
        - length_equals: [content, 0]

- test:
    skipIf: ${is_production()}
    name: 获取售后单详情-afterSaleId存在
    skipUnless: ${eval_equal($afterSale_status, 200)}
    request:
        method: GET
        url: /after_sales/$afterSaleId
    validate:
        - eq: [status_code, 200]
        - type_match: [content, object]
        - length_equals: [content, 32]


- test:
    name: 获取售后单详情-afterSaleId不存在
    request:
        method: GET
        url: /after_sales/$unexisted_afterSaleId
    validate:
        - eq: [status_code, 200]